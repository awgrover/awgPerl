A scalar slot '{{$scalar1}}'
	Different scalar types should be no-effort in perl:
	int '{{$scalarInt}}'
	float '{{$scalarFloat}}'

Slots holding fns ( 'sub {}' in perl ) interpolate: '{{$simpleFn}}'

Slots can be a path
	to an array element '{{$array.2}}'
	to a hash value '{{$hash.key2}}'
	to a object method '{{$obj.method2}}'
	through each of those '{{$array.1.madeIt}}, {{$hash.key1.madeIt}}, {{$obj.method1.madeIt}}'.

Slots can nest {{$array.{{$zero}}}}

Slots access is cached {{$countingFn}}, {{$obj.volatile}}, for the template
	so, called again it is {{$countingFn}}, {{$obj.volatize}}{{$obj.volatile}}

We are minimally aware of html/xml:
If we are aware, than '{{$htmlChars}}' should be escaped.
if we are aware, than this comment '<!-- -->' should be elided.
If we are really aware of html/xml comments, than this interpolation in a comment
	<!-- {{$dieFn}} -->should not die

'if' operates on<!-- not literals ({{if 1}}true{{/if}}), -->
	simple slots ({{if $scalar}}true{{/if}}),
	slots that are fns ({{if $simpleFn}}true{{/if}}),
	slots with paths ({{if $obj.trueA}}true{{/if}}).

'if' treats the following as false:
	0 ({{if $zero}}true{{else}}false{{/if}})
	undef ({{if $anUndef}}true{{else}}false{{/if}})
	"" ({{if $empty}}true{{else}}false{{/if}})
	and everything else as true, including " " ({{if $oneBlank}}true{{/if}})
Of course, 'if !' reverses that:
	0 ({{if !$zero}}true{{else}}false{{/if}})
	undef ({{if !$anUndef}}true{{else}}false{{/if}})
	"" ({{if !$empty}}true{{else}}false{{/if}})
	and everything else as true, including " " ({{if !$oneBlank}}false{{else}}true{{/if}})
	and spaces can be after ! ({{if ! $zero}}true{{/if}})

'if' could have an empty body: '{{if $scalar}}{{else}}fail{{/if}}'
'if' could have an empty else-body: '{{if ! $scalar}}fail{{else}}{{/if}}'
and of course, no else-body: '{{if ! $scalar}}fail{{/if}}'

The bodies of an 'if' can be twiddle expressions: {{if $scalar}}interp '{{$scalar}}' here{{else}}nothing {{$scalar}} here{{/if}}

The expression for 'if' only takes a slot (as above) or an 'eq slot/lit':
	{{if $scalar eq 1}}OK:{{else}}failed:{{/if}} $scalar eq 1
	{{if $scalar eq $scalar}}OK:{{else}}failed:{{/if}} $scalar eq $scalar
	{{if $scalar eq $hash.a}}OK:{{else}}failed:{{/if}} $scalar eq $hash.a
	{{if $hash.a eq $scalar}}OK:{{else}}failed:{{/if}} $hash.a eq $scalar
	{{if !$hash.a eq $scalar}}failed:{{else}}OK:{{/if}} !$hash.a eq $scalar
	
An object hash, and array will yield a value dependant on the language/implementation,
but are treated as true if they exist.
An object ({{if $obj}}true{{/if}}), 
	hash ({{if $hash}}true{{/if}}), 
	and array ({{if $array}}true{{/if}})
	will yield a value dependant on the language/implementation,
	but are treated as true if they exist.

Three twiddles should url-escape: '{{{$qstringValue}}}'

Iterate {{$cleanArray.count}} times{{iterate $cleanArray $v}}
	{{$v_index}} {{$v}}{{/iterate}}

Nesting ...{{if $scalar}}{{iterate $cleanArray $v}}
		{{$v_index}} {{if $v_index eq 1}}First{{else}}{{if $v_index eq 2}}Second {{/if}}later{{/if}}{{/iterate}}{{/if}}

{{file:template_test.inc}}
{{file:{{$cwd}}/template_test.inc}}
|
a:{{select '/*/a[@b="bob"]' from file:template_test.xml}}
b:{{select '/*/a[@b="bob"]' from file:{{$cwd}}/template_test.xml}}
|
a:{{select file:template_test.xml as file:template_test.xsl}}
b:{{select file:{{$cwd}}/template_test.xml as file:{{$cwd}}/template_test.xsl}}
|
a:{{select '/*/a[@b="bob"]' from file:template_test.xml as file:template_test.xsl}}
b:{{select '/*/a[@b="bob"]' from file:{{$cwd}}/template_test.xml as file:{{$cwd}}/template_test.xsl}}
__EXPECTED__
A scalar slot 'a scalar value'
	Different scalar types should be no-effort in perl:
	int '9'
	float '1.3'

Slots holding fns ( 'sub {}' in perl ) interpolate: 'interpolated fn value'

Slots can be a path
	to an array element 'elem2'
	to a hash value 'val2'
	to a object method 'meth2'
	through each of those 'made it, made it, made it'.

Slots can nest 1

Slots access is cached once, 1, for the template
	so, called again it is once, 1

We are minimally aware of html/xml:
If we are aware, than '&quot; quoted, &amp; anded, &lt;&gt; compared &quot;' should be escaped.
if we are aware, than this comment '' should be elided.
If we are really aware of html/xml comments, than this interpolation in a comment
	should not die

'if' operates on
	simple slots (true),
	slots that are fns (true),
	slots with paths (true).

'if' treats the following as false:
	0 (false)
	undef (false)
	"" (false)
	and everything else as true, including " " (true)
Of course, 'if !' reverses that:
	0 (true)
	undef (true)
	"" (true)
	and everything else as true, including " " (true)
	and spaces can be after ! (true)

'if' could have an empty body: ''
'if' could have an empty else-body: ''
and of course, no else-body: ''

The bodies of an 'if' can be twiddle expressions: interp '1' here

The expression for 'if' only takes a slot (as above) or an 'eq slot/lit':
	OK: $scalar eq 1
	OK: $scalar eq $scalar
	OK: $scalar eq $hash.a
	OK: $hash.a eq $scalar
	OK: !$hash.a eq $scalar
	
An object hash, and array will yield a value dependant on the language/implementation,
but are treated as true if they exist.
An object (true), 
	hash (true), 
	and array (true)
	will yield a value dependant on the language/implementation,
	but are treated as true if they exist.

Three twiddles should url-escape: 'blah&lt;&gt;&amp;&quot;&#27;&#20;&#3D;&#23;&#40;&#25;&#2B;blah'

Iterate 3 times
	0 1
	1 elem2
	2 3

Nesting ...
		0 later
		1 First
		2 Second later

made it
made it
|
a:<a b="bob">bob</a><a b="bob"><c d="etc"/></a><a b="bob">made it</a>
b:<a b="bob">bob</a><a b="bob"><c d="etc"/></a><a b="bob">made it</a>
|
a:<a b="XXbobXX">bob</a><a b="notbob">notbob</a><a b="XXbobXX"><c/></a><a b="XXbobXX">made it</a>
b:<a b="XXbobXX">bob</a><a b="notbob">notbob</a><a b="XXbobXX"><c/></a><a b="XXbobXX">made it</a>
|
a:<a b="XXbobXX">bob</a><a b="XXbobXX"><c/></a><a b="XXbobXX">made it</a>
b:<a b="XXbobXX">bob</a><a b="XXbobXX"><c/></a><a b="XXbobXX">made it</a>
