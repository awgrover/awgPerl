#!/usr/bin/env perl
# Create a dot file of the tables/foreign-keys
# --- [--infer_fk [--tableses]] dbi:... "user" "pass" catalog schema > dot
# The option, --infer_fk, will guess that a field is a foriegn key if it looks like "<table>_<id>"
# The option, --tableses, will pluralize the table name the --infer_fk guesses
# These seem to give good layouts (dot is bad with unconnected tables)
# dot -Kfdp -Gsplines=true
# dot -Kneato -Gsplines=true

package ERD;

use warnings; use strict; no warnings 'uninitialized';
use DBI;
use Data::Dumper;

my $DBH;
my ($Infer_fk, $Tableses);

sub help { die "usage: ".`awk 'FNR==2,/^\$/ {print}' $0` if @ARGV < 1; }

sub main {
    while ($ARGV[0] =~ /^--/) {
      if ($ARGV[0] eq '--infer_fk') {
        $Infer_fk = 1;
        shift @ARGV;
        next;
        }
      if ($ARGV[0] eq '--tableses') {
        require Lingua::EN::Inflect; import Lingua::EN::Inflect 'PL';
        $Tableses = 1;
        shift @ARGV;
        next;
        }
      help();
      }

    help();

    my ($con,$usr,$pas, $catalog, $schema) = @ARGV; # (shift @ARGV, shift @ARGV, shift @ARGV);

    $DBH = DBI->connect($con,$usr,$pas, { RaiseError => 1,});

    if (!defined $catalog) {
        print "Table Types:\n";
        print_table_info('','','','%','TABLE_TYPE');
        print "Catalogs:\n";
        print_table_info('%','','','');
        }
    elsif (!defined $schema) {
        print "Schemas:\n";
        print_table_info('','%','','','TABLE_SCHEM');
        }
    else {
        print "digraph $schema {\n";
        print "graph [overlap=false];\n";
        print "edge [tailclip=false];\n";
        # print_table_info($catalog,$schema,'%','TABLE','TABLE_NAME','TABLE_TYPE');
        print_table_info($catalog,$schema,'%','TABLE',\&table_relations);
        print "}\n";
        }

    }

sub table_relations {
    my ($table_info, $names, $catalog, $schema) = @_;

    $names = [ 'TABLE_NAME' ];

    # header
    if (!$table_info) {
        # print join(", ",@$names),"\n";
        return;
        }

    # Table decl
    # print join(", ",map {$table_info->{$_}} @$names),"\n";
    my ($col_list, $column_names) = get_column_list($catalog, $schema, $table_info->{'TABLE_NAME'});
    #my @ids = map {$_->[0]} @$col_list;
    #my @types = map {$_->[1]} @$col_list;
    #my @annots = map {$_->[2]} @$col_list;
    print $table_info->{'TABLE_NAME'},' [shape=none,margin=0,label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="3"><TR><TD ALIGN="left" COLSPAN="3">',$table_info->{'TABLE_NAME'},"</TD></TR>".join("\n",@$col_list);
    #print $table_info->{'TABLE_NAME'}," [shape=record,label=\"";
    #print "{".join('|',@ids)."}";
    #print "|{".join('|',@types)."}";
    #print "|{".join('|',@annots)."}";
    # do columns
    # then do ports for fk?
    print "</TABLE>>];\n";


    # Start FK decl
    my @arcs;
    my $sth = $DBH->foreign_key_info( undef, undef, undef,
           , $catalog, $schema, $table_info->{'TABLE_NAME'} );

    # sqlite gives null for foreign_key_info
    if (!$sth) {
        my $fki_fn = 'remedial_foreign_key_info_'.$DBH->{'Driver'}->{'Name'};
        if (ERD->can($fki_fn)) {
            no strict 'refs';
            my $refs = &$fki_fn($catalog, $schema, $table_info);
            use strict 'refs';

            # print $table_info->{'TABLE_NAME'}," [shape=box];\n";
            foreach (@$refs) {
               push @arcs, fk_arc($_);
               }
            }
        else {
            die "\$dbh->foreign_key_info gave undef for table '".$table_info->{'TABLE_NAME'}."', and there is no ${fki_fn}() to get the same info";
            }
        }
    
    # use the $DBH->foreign_key_info
    else {

        my @fk_names = sort @{$sth->{'NAME_uc'}};
        while (my $fk_info = $sth->fetchrow_hashref('NAME_uc')) {
            push @arcs, fk_arc($fk_info);
            }
        }

    if ($Infer_fk && !@arcs) {
      my $refs = infer_foreign_keys($catalog, $schema, $table_info->{'TABLE_NAME'}, $column_names);
      @arcs = map {fk_arc($_)} @$refs;
      }

    print @arcs;
    }

sub infer_foreign_keys {
  my ($catalog, $schema, $table_name, $column_names) = @_;

  my @refs;
  foreach my $column (@$column_names) {
    if ($column =~ /^(.+)_id$/) {
      my $ftable = $1;
      $ftable = PL($ftable) if $Tableses;
      push @refs, {
          PKTABLE_CAT => $catalog,
          PKTABLE_SCHEM => $schema,
          PKTABLE_NAME => $ftable,
          PKCOLUMN_NAME => 'id',
          FKTABLE_CAT => $catalog,
          FKTABLE_SCHEM => $schema,
          FKTABLE_NAME => $table_name,
          FKCOLUMN_NAME => $column,
          };
      }
    }
  \@refs;
  }

sub get_column_list {
    my ($catalog, $schema, $table_name) = @_;
    my $sth = $DBH->column_info( $catalog, $schema, $table_name,'%');
    die "no col info" if !$sth;

    # my @ci_names = qw(COLUMN_NAME COLUMN_DEF DATA_TYPE TYPE_NAME); # sort @{$sth->{'NAME_uc'}};
    # print join(", ",@ci_names),"\n";
    my @columns;
    my @column_names;
    while (my $col_info = $sth->fetchrow_hashref('NAME_uc')) {
        push @column_names, $col_info->{'COLUMN_NAME'};

        my @col; # fld, type, not-null
        push @col, "<TD ALIGN='left' PORT='".$col_info->{'COLUMN_NAME'}."'>".$col_info->{'COLUMN_NAME'}."</TD>";

        push @col, "<TD ALIGN='left'>".$col_info->{'TYPE_NAME'} || $col_info->{'SQL_DATA_TYPE'};
        if ($col_info->{'DECIMAL_DIGITS'} != 0) {
            if ($col_info->{'COLUMN_SIZE'} =~ /,/) {
              $col[-1] .= sprintf "(%s)",@$col_info{'DECIMAL_DIGITS'};
              }
            else {
              $col[-1] .= sprintf "(%d.%d)",@$col_info{qw(COLUMN_SIZE DECIMAL_DIGITS)};
              }
            }
        elsif ($col_info->{'COLUMN_SIZE'} > 0) {
            $col[-1] .= sprintf "(%d)",$col_info->{'COLUMN_SIZE'};
            }
        $col[-1] .= "</TD>";

        push @col, "<TD ALIGN='left' PORT='_".$col_info->{'COLUMN_NAME'}."'>";
        my $not_null = ($col_info->{'NULLABLE'} == 0) ? "not null" : '';
        $col[-1] .= $not_null;
        $col[-1] .= ($not_null ? "<BR/>" : '').$col_info->{'COLUMN_DEF'} if $col_info->{'COLUMN_DEF'};
        $col[-1] .= "</TD>";

        # printf STDERR "#%d %s %s/%s(%d.%d) NULL %d DEFAULT %s\n", @$col_info{qw(ORDINAL_POSITION COLUMN_NAME TYPE_NAME SQL_DATA_TYPE COLUMN_SIZE DECIMAL_DIGITS NULLABLE COLUMN_DEF)};
        # print join(", ",map{$col_info->{$_}} @ci_names),"\n";
        push @columns, '<TR>'.join("", @col)."</TR>";
        }
    (\@columns, \@column_names);
    }

sub fk_arc {
    my ($fkinfo) = @_;
    
    my $from_table = ($fkinfo->{'FKTABLE_NAME'} || $fkinfo->{'FK_TABLE_NAME'});
    my $to_table = ($fkinfo->{'PKTABLE_NAME'} || $fkinfo->{'UK_TABLE_NAME'});
    my $from_field = ($fkinfo->{'FKCOLUMN_NAME'} || $fkinfo->{'FK_COLUMN_NAME'});
    my $to_field = ($fkinfo->{'PKCOLUMN_NAME'} || $fkinfo->{'PK_COLUMN_NAME'});
    "",$from_table.":$from_field".":w",
        " -> ",
        $to_table.":$to_field".":w",
        "\n"
        ;
    }

sub print_table_info {
    my ($catalog,$schema,$table,$type, @columns) = @_;

    my $sth = $DBH->table_info($catalog,$schema,$table,$type);
    my @names = sort @{$sth->{'NAME_uc'}};

    my $printer;
    if (ref $_[4] eq 'CODE') {
        $printer = shift @columns;
        }
    else {
        @names = @columns;
        $printer = sub {my ($table_info, $names) = @_; print join(", ",map {$table_info->{$_}} @$names),"\n"; }
        }

    &$printer(undef, \@names, $catalog, $schema);
    while (my $table_info = $sth->fetchrow_hashref('NAME_uc')) {
        &$printer($table_info,\@names, $catalog, $schema);
        }
    }

sub remedial_foreign_key_info_Pg {
    # Actually, this is 
    my ($catalog, $schema, $row) = @_;
    # return n-rows of a subset of the info that foreign_key_info() gives
    # postgres knows how, so this means there is no FK for the table
    []
    }

sub remedial_foreign_key_info_SQLite {
    my ($catalog, $schema, $row) = @_;
    # return n-rows of a subset of the info that foreign_key_info() gives

    my $sth = $DBH->table_info($catalog,$schema,$row->{'TABLE_NAME'},$row->{'TABLE_TYPE'});
    my @refs;
    while (my $tirow = $sth->fetchrow_hashref('NAME_uc')) {
        my $sql = $tirow->{'SQLITE_SQL'};
        while (my ($col,$coltype, $ftable,$fcol,$rest) = $sql =~ /\b(\w+) (\w+)? references (\w+) \((\w+)\)(.+)/s) {
            push @refs, { 
                PKTABLE_CAT => $catalog,
                PKTABLE_SCHEM => $schema,
                PKTABLE_NAME => $ftable,
                PKCOLUMN_NAME => $fcol,
                FKTABLE_CAT => $catalog,
                FKTABLE_SCHEM => $schema,
                FKTABLE_NAME => $row->{'TABLE_NAME'},
                FKCOLUMN_NAME => $col,
                };
            $sql = $rest;
            }
        }
    \@refs;
    }

main();
